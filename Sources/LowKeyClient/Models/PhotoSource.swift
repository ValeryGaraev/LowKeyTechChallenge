//
// PhotoSource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Photo source URL */
public struct PhotoSource: Codable, JSONEncodable {

    public var original: String?
    public var large2x: String?
    public var large: String?
    public var medium: String?
    public var small: String?
    public var portrait: String?
    public var landscape: String?
    public var tiny: String?

    public init(original: String? = nil, large2x: String? = nil, large: String? = nil, medium: String? = nil, small: String? = nil, portrait: String? = nil, landscape: String? = nil, tiny: String? = nil) {
        self.original = original
        self.large2x = large2x
        self.large = large
        self.medium = medium
        self.small = small
        self.portrait = portrait
        self.landscape = landscape
        self.tiny = tiny
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case original
        case large2x
        case large
        case medium
        case small
        case portrait
        case landscape
        case tiny
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(original, forKey: .original)
        try container.encodeIfPresent(large2x, forKey: .large2x)
        try container.encodeIfPresent(large, forKey: .large)
        try container.encodeIfPresent(medium, forKey: .medium)
        try container.encodeIfPresent(small, forKey: .small)
        try container.encodeIfPresent(portrait, forKey: .portrait)
        try container.encodeIfPresent(landscape, forKey: .landscape)
        try container.encodeIfPresent(tiny, forKey: .tiny)
    }
}

